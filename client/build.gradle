plugins {
  // Apply the java plugin to add support for Java
  id 'java'

  // Apply the application plugin to add support for building an application
  id 'application'

  // Static analysis
  id 'pmd'
  id 'findbugs'
  id 'checkstyle'
}

// Define the main class for the application
mainClassName = 'org.comment_screen.CommentScreenClient'

dependencies {
  compile group: 'io.socket', name: 'socket.io-client', version: '1.0.0'
  compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.1'
  testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.1'
}

repositories {
  jcenter()
}

test {
  useJUnitPlatform {
    includeEngines 'junit-jupiter'
  }

  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }

  afterSuite { desc, result ->
    if (!desc.parent) {
      println "\nTest result: ${result.resultType}"
      println "Test summary: ${result.testCount} tests, " +
        "${result.successfulTestCount} succeeded, " +
        "${result.failedTestCount} failed, " +
        "${result.skippedTestCount} skipped"
      }
  }
}

pmd {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    'java-basic',
    'java-braces',
    'java-codesize'
  ]
}

// To generate executable jar(fat jar)
def executableBaseName = 'comment-screen-client'
task executableJar(type:Jar, dependsOn: jar) {
  archiveName = "${executableBaseName}.jar"
  manifest {
    attributes 'Main-Class': mainClassName
  }

  from configurations.compile.collect {it.isDirectory() ? it : zipTree(it)}
  with jar
  from "$buildDir/classes/main"
  from "$buildDir/resources/main"

  copy {
    from "config"
    into "$buildDir/libs"
    include "application.properties"
  }
}
